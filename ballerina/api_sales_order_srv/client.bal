// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerinax/sap;

# In every API call, you can make use of the following operations:
#  - You can read entire sales orders or only parts of the data, using the provided filters.
#  - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. 
# If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.
#  - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.
#  - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.
#  - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.
#  - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_SALES_ORDER_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrder(CreateA_SalesOrder payload, map<string|string[]> headers = {}) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrder`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a billing plan item of a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderBillingPlanItem(CreateA_SalesOrderBillingPlanItem payload, map<string|string[]> headers = {}) returns A_SalesOrderBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header partner for a specific sales order with a specific partner function.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderHeaderPartner(CreateA_SalesOrderHeaderPartner payload, map<string|string[]> headers = {}) returns A_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header pricing element for a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderHeaderPrElement(CreateA_SalesOrderHeaderPrElement payload, map<string|string[]> headers = {}) returns A_SalesOrderHeaderPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a sales order item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderItem(CreateA_SalesOrderItem payload, map<string|string[]> headers = {}) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a partner for a sales order item with a specific partner function.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderItemPartner(CreateA_SalesOrderItemPartner payload, map<string|string[]> headers = {}) returns A_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an item pricing element.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderItemPrElement(CreateA_SalesOrderItemPrElement payload, map<string|string[]> headers = {}) returns A_SalesOrderItemPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPrElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a sales order item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderItemRelatedObject(CreateA_SalesOrderItemRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesOrderItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an item text.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderItemText(CreateA_SalesOrderItemText payload, map<string|string[]> headers = {}) returns A_SalesOrderItemTextWrapper|error {
        string resourcePath = string `/A_SalesOrderItemText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a sales order header.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderRelatedObject(CreateA_SalesOrderRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesOrderRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderRelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a schedule line.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderScheduleLine(CreateA_SalesOrderScheduleLine payload, map<string|string[]> headers = {}) returns A_SalesOrderScheduleLineWrapper|error {
        string resourcePath = string `/A_SalesOrderScheduleLine`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header text for a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderText(CreateA_SalesOrderText payload, map<string|string[]> headers = {}) returns A_SalesOrderTextWrapper|error {
        string resourcePath = string `/A_SalesOrderText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a payment plan for a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SlsOrdPaymentPlanItemDetails(CreateA_SlsOrdPaymentPlanItemDetails payload, map<string|string[]> headers = {}) returns A_SlsOrdPaymentPlanItemDetailsWrapper|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a billing plan item for a sales order item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SlsOrderItemBillingPlanItem(CreateA_SlsOrderItemBillingPlanItem payload, map<string|string[]> headers = {}) returns A_SlsOrderItemBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a billing plan item for a sales order billing plan.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBillingPlanItemOfA_SalesOrderBillingPlan(string SalesOrder, string BillingPlan, CreateA_SalesOrderBillingPlanItem payload, map<string|string[]> headers = {}) returns A_SalesOrderBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_BillingPlanItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a billing plan item for a sales order item billing plan.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createBillingPlanItemOfA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, CreateA_SlsOrderItemBillingPlanItem payload, map<string|string[]> headers = {}) returns A_SlsOrderItemBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_BillingPlanItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a sales order item for a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemOfA_SalesOrder(string SalesOrder, CreateA_SalesOrderItem payload, map<string|string[]> headers = {}) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Item`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header partner for a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPartnerOfA_SalesOrder(string SalesOrder, CreateA_SalesOrderHeaderPartner payload, map<string|string[]> headers = {}) returns A_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Partner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an item partner for a specific sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPartnerOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, CreateA_SalesOrderItemPartner payload, map<string|string[]> headers = {}) returns A_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_Partner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header payment plan for a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPaymentPlanItemDetailsOfA_SalesOrder(string SalesOrder, CreateA_SlsOrdPaymentPlanItemDetails payload, map<string|string[]> headers = {}) returns A_SlsOrdPaymentPlanItemDetailsWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_PaymentPlanItemDetails`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header pricing element for a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPricingElementOfA_SalesOrder(string SalesOrder, CreateA_SalesOrderHeaderPrElement payload, map<string|string[]> headers = {}) returns A_SalesOrderHeaderPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_PricingElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a pricing element for a specific sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPricingElementOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, CreateA_SalesOrderItemPrElement payload, map<string|string[]> headers = {}) returns A_SalesOrderItemPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_PricingElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a sales order header.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelatedObjectOfA_SalesOrder(string SalesOrder, CreateA_SalesOrderRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesOrderRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_RelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a specific sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelatedObjectOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, CreateA_SalesOrderItemRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesOrderItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_RelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates schedule lines for a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createScheduleLineOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, CreateA_SalesOrderScheduleLine payload, map<string|string[]> headers = {}) returns A_SalesOrderScheduleLineWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_ScheduleLine`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a header text for a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTextOfA_SalesOrder(string SalesOrder, CreateA_SalesOrderText payload, map<string|string[]> headers = {}) returns A_SalesOrderTextWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Text`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a text for a specific sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTextOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, CreateA_SalesOrderItemText payload, map<string|string[]> headers = {}) returns A_SalesOrderItemTextWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_Text`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a billing plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderBillingPlanItem(string SalesOrder, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a header partner of a specific sales order with a specific partner function.
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderHeaderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a header pricing element for a sales order.
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderHeaderPrElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a partner of a specific sales order item with a specific partner function.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes an item pricing element.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderItemPrElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a related object from a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderItemRelatedObject(string SalesOrder, string SalesOrderItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes an item text.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemText(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a related object from a sales order header.
    #
    # + SalesOrder - Sales Order
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderRelatedObject(string SalesOrder, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a schedule line.
    #
    # + SalesOrder - Sales Document
    # + SalesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderScheduleLine(string SalesOrder, string SalesOrderItem, string ScheduleLine, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderScheduleLine(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',ScheduleLine='${getEncodedUri(ScheduleLine)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a header text from a sales order.
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesOrderText(string SalesOrder, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderText(SalesOrder='${getEncodedUri(SalesOrder)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a payment plan item of a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + PaymentPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SlsOrdPaymentPlanItemDetails(string SalesOrder, string PaymentPlanItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails(SalesOrder='${getEncodedUri(SalesOrder)}',PaymentPlanItem='${getEncodedUri(PaymentPlanItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a billing plan item of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads the header of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *GetA_SalesOrderQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderBillingPlan(string SalesOrder, string BillingPlan, map<string|string[]> headers = {}, *GetA_SalesOrderBillingPlanQueries queries) returns A_SalesOrderBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a billing plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderBillingPlanItem(string SalesOrder, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetA_SalesOrderBillingPlanItemQueries queries) returns A_SalesOrderBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of a sales order and a partner function.
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderHeaderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesOrderHeaderPartnerQueries queries) returns A_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header pricing element for a sales order.
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderHeaderPrElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesOrderHeaderPrElementQueries queries) returns A_SalesOrderHeaderPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *GetA_SalesOrderItemQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, map<string|string[]> headers = {}, *GetA_SalesOrderItemBillingPlanQueries queries) returns A_SalesOrderItemBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads an item partner of an item with a specific partner function in a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesOrderItemPartnerQueries queries) returns A_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the address of an item partner of a sales order.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + SalesOrderItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemPartnerAddress(string SalesOrder, string SalesOrderItem, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetA_SalesOrderItemPartnerAddressQueries queries) returns A_SalesOrderItemPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing element of a item with specific pricing details.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemPrElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesOrderItemPrElementQueries queries) returns A_SalesOrderItemPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a related object from a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemRelatedObject(string SalesOrder, string SalesOrderItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetA_SalesOrderItemRelatedObjectQueries queries) returns A_SalesOrderItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads an item text.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetA_SalesOrderItemTextQueries queries) returns A_SalesOrderItemTextWrapper|error {
        string resourcePath = string `/A_SalesOrderItemText(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a preceding item for a sales order item.
    #
    # + SalesOrder - Subsequent Sales and Distribution Document
    # + SalesOrderItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItmPrecdgProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SalesOrderItmPrecdgProcFlowQueries queries) returns A_SalesOrderItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItmPrecdgProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a subsequent item for a sales order item.
    #
    # + SalesOrder - Preceding sales and distribution document
    # + SalesOrderItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderItmSubsqntProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SalesOrderItmSubsqntProcFlowQueries queries) returns A_SalesOrderItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItmSubsqntProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the address of a header partner of a sales order.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderPartnerAddress(string SalesOrder, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetA_SalesOrderPartnerAddressQueries queries) returns A_SalesOrderPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a preceding document for a sales order.
    #
    # + SalesOrder - Subsequent Sales and Distribution Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderPrecdgProcFlow(string SalesOrder, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SalesOrderPrecdgProcFlowQueries queries) returns A_SalesOrderPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderPrecdgProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a related object from the header of a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderRelatedObject(string SalesOrder, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetA_SalesOrderRelatedObjectQueries queries) returns A_SalesOrderRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a schedule line.
    #
    # + SalesOrder - Sales Document
    # + SalesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderScheduleLine(string SalesOrder, string SalesOrderItem, string ScheduleLine, map<string|string[]> headers = {}, *GetA_SalesOrderScheduleLineQueries queries) returns A_SalesOrderScheduleLineWrapper|error {
        string resourcePath = string `/A_SalesOrderScheduleLine(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',ScheduleLine='${getEncodedUri(ScheduleLine)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a subsequent document of a sales order.
    #
    # + SalesOrder - Preceding sales and distribution document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderSubsqntProcFlow(string SalesOrder, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SalesOrderSubsqntProcFlowQueries queries) returns A_SalesOrderSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderSubsqntProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a header text from a sales order.
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesOrderText(string SalesOrder, string Language, string LongTextID, map<string|string[]> headers = {}, *GetA_SalesOrderTextQueries queries) returns A_SalesOrderTextWrapper|error {
        string resourcePath = string `/A_SalesOrderText(SalesOrder='${getEncodedUri(SalesOrder)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a payment plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + PaymentPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsOrdPaymentPlanItemDetails(string SalesOrder, string PaymentPlanItem, map<string|string[]> headers = {}, *GetA_SlsOrdPaymentPlanItemDetailsQueries queries) returns A_SlsOrdPaymentPlanItemDetailsWrapper|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails(SalesOrder='${getEncodedUri(SalesOrder)}',PaymentPlanItem='${getEncodedUri(PaymentPlanItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a billing plan item of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetA_SlsOrderItemBillingPlanItemQueries queries) returns A_SlsOrderItemBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBillingPlanOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *GetBillingPlanOfA_SalesOrderQueries queries) returns A_SalesOrderBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_BillingPlan`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan of a billing plan item of a sales order header.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBillingPlanOfA_SalesOrderBillingPlanItem(string SalesOrder, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetBillingPlanOfA_SalesOrderBillingPlanItemQueries queries) returns A_SalesOrderBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')/to_BillingPlan`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBillingPlanOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *GetBillingPlanOfA_SalesOrderItemQueries queries) returns A_SalesOrderItemBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_BillingPlan`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item billing plan for an item billing plan item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getBillingPlanOfA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetBillingPlanOfA_SlsOrderItemBillingPlanItemQueries queries) returns A_SalesOrderItemBillingPlanWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')/to_BillingPlan`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item partner for an item partner address.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + SalesOrderItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPartnerOfA_SalesOrderItemPartnerAddress(string SalesOrder, string SalesOrderItem, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetPartnerOfA_SalesOrderItemPartnerAddressQueries queries) returns A_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header partner for a header partner address.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPartnerOfA_SalesOrderPartnerAddress(string SalesOrder, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetPartnerOfA_SalesOrderPartnerAddressQueries queries) returns A_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for an item billing plan.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemBillingPlanQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for a partner function of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemPartnerQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for an item partner address.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + SalesOrderItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemPartnerAddress(string SalesOrder, string SalesOrderItem, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemPartnerAddressQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for a pricing element.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemPrElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemPrElementQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for a related object.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemRelatedObject(string SalesOrder, string SalesOrderItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemRelatedObjectQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for an item text.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItemTextQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemText(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item data for a preceding item of a sales order.
    #
    # + SalesOrder - Subsequent Sales and Distribution Document
    # + SalesOrderItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItmPrecdgProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItmPrecdgProcFlowQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItmPrecdgProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item data for a subsequent item of a sales order.
    #
    # + SalesOrder - Preceding sales and distribution document
    # + SalesOrderItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SalesOrderItmSubsqntProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SalesOrderItmSubsqntProcFlowQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItmSubsqntProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order item for a billing plan item of this sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemOfA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetSalesOrderItemOfA_SlsOrderItemBillingPlanItemQueries queries) returns A_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')/to_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a billing plan.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderBillingPlan(string SalesOrder, string BillingPlan, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderBillingPlanQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a billing plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderBillingPlanItem(string SalesOrder, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderBillingPlanItemQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a header partner.
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderHeaderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderHeaderPartnerQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a pricing element.
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderHeaderPrElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderHeaderPrElementQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for an item billing plan.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemBillingPlanQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header of a partner function of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemPartnerQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related to_SalesOrder
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + SalesOrderItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemPartnerAddress(string SalesOrder, string SalesOrderItem, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemPartnerAddressQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a pricing element.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemPrElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemPrElementQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a related object of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemRelatedObject(string SalesOrder, string SalesOrderItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemRelatedObjectQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a text of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItemTextQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItemText(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header data of a preceding item of a sales order.
    #
    # + SalesOrder - Subsequent Sales and Distribution Document
    # + SalesOrderItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItmPrecdgProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItmPrecdgProcFlowQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItmPrecdgProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header data for a subsequent item of a sales order.
    #
    # + SalesOrder - Preceding sales and distribution document
    # + SalesOrderItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderItmSubsqntProcFlow(string SalesOrder, string SalesOrderItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderItmSubsqntProcFlowQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderItmSubsqntProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order for a header partner address.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderPartnerAddress(string SalesOrder, string PartnerFunction, string AddressRepresentationCode, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderPartnerAddressQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header data for a preceding document of a sales order.
    #
    # + SalesOrder - Subsequent Sales and Distribution Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderPrecdgProcFlow(string SalesOrder, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderPrecdgProcFlowQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderPrecdgProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a related object.
    #
    # + SalesOrder - Sales Order
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderRelatedObject(string SalesOrder, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderRelatedObjectQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderRelatedObject(SalesOrder='${getEncodedUri(SalesOrder)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header data for a subsequent document of a sales order.
    #
    # + SalesOrder - Preceding sales and distribution document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderSubsqntProcFlow(string SalesOrder, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderSubsqntProcFlowQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderSubsqntProcFlow(SalesOrder='${getEncodedUri(SalesOrder)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a header text.
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SalesOrderText(string SalesOrder, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderOfA_SalesOrderTextQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrderText(SalesOrder='${getEncodedUri(SalesOrder)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for a payment plan item.
    #
    # + SalesOrder - Sales Order
    # + PaymentPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SlsOrdPaymentPlanItemDetails(string SalesOrder, string PaymentPlanItem, map<string|string[]> headers = {}, *GetSalesOrderOfA_SlsOrdPaymentPlanItemDetailsQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails(SalesOrder='${getEncodedUri(SalesOrder)}',PaymentPlanItem='${getEncodedUri(PaymentPlanItem)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales order header for an item billing plan item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, map<string|string[]> headers = {}, *GetSalesOrderOfA_SlsOrderItemBillingPlanItemQueries queries) returns A_SalesOrderWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')/to_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan items of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderBillingPlanItems(map<string|string[]> headers = {}, *ListA_SalesOrderBillingPlanItemsQueries queries) returns CollectionOfA_SalesOrderBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plans of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderBillingPlans(map<string|string[]> headers = {}, *ListA_SalesOrderBillingPlansQueries queries) returns CollectionOfA_SalesOrderBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlan`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderHeaderPartners(map<string|string[]> headers = {}, *ListA_SalesOrderHeaderPartnersQueries queries) returns CollectionOfA_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header pricing elements of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderHeaderPrElements(map<string|string[]> headers = {}, *ListA_SalesOrderHeaderPrElementsQueries queries) returns CollectionOfA_SalesOrderHeaderPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plans of all sales order items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemBillingPlans(map<string|string[]> headers = {}, *ListA_SalesOrderItemBillingPlansQueries queries) returns CollectionOfA_SalesOrderItemBillingPlanWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all addresses for item partners of sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemPartnerAddresses(map<string|string[]> headers = {}, *ListA_SalesOrderItemPartnerAddressesQueries queries) returns CollectionOfA_SalesOrderItemPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item partners for all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemPartners(map<string|string[]> headers = {}, *ListA_SalesOrderItemPartnersQueries queries) returns CollectionOfA_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item pricing elements of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemPrElements(map<string|string[]> headers = {}, *ListA_SalesOrderItemPrElementsQueries queries) returns CollectionOfA_SalesOrderItemPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPrElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads related objects from the items of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemRelatedObjects(map<string|string[]> headers = {}, *ListA_SalesOrderItemRelatedObjectsQueries queries) returns CollectionOfA_SalesOrderItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderItemRelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads item texts of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItemTexts(map<string|string[]> headers = {}, *ListA_SalesOrderItemTextsQueries queries) returns CollectionOfA_SalesOrderItemTextWrapper|error {
        string resourcePath = string `/A_SalesOrderItemText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales order items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItems(map<string|string[]> headers = {}, *ListA_SalesOrderItemsQueries queries) returns CollectionOfA_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding items of all sales orders items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItmPrecdgProcFlows(map<string|string[]> headers = {}, *ListA_SalesOrderItmPrecdgProcFlowsQueries queries) returns CollectionOfA_SalesOrderItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItmPrecdgProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent items of all sales orders items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderItmSubsqntProcFlows(map<string|string[]> headers = {}, *ListA_SalesOrderItmSubsqntProcFlowsQueries queries) returns CollectionOfA_SalesOrderItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItmSubsqntProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all addresses for header partners of sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderPartnerAddresses(map<string|string[]> headers = {}, *ListA_SalesOrderPartnerAddressesQueries queries) returns CollectionOfA_SalesOrderPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderPartnerAddress`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding documents of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderPrecdgProcFlows(map<string|string[]> headers = {}, *ListA_SalesOrderPrecdgProcFlowsQueries queries) returns CollectionOfA_SalesOrderPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderPrecdgProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads related objects from the headers of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderRelatedObjects(map<string|string[]> headers = {}, *ListA_SalesOrderRelatedObjectsQueries queries) returns CollectionOfA_SalesOrderRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderRelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the schedule lines of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderScheduleLines(map<string|string[]> headers = {}, *ListA_SalesOrderScheduleLinesQueries queries) returns CollectionOfA_SalesOrderScheduleLineWrapper|error {
        string resourcePath = string `/A_SalesOrderScheduleLine`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent documents of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderSubsqntProcFlows(map<string|string[]> headers = {}, *ListA_SalesOrderSubsqntProcFlowsQueries queries) returns CollectionOfA_SalesOrderSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderSubsqntProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header texts of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrderTexts(map<string|string[]> headers = {}, *ListA_SalesOrderTextsQueries queries) returns CollectionOfA_SalesOrderTextWrapper|error {
        string resourcePath = string `/A_SalesOrderText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales order headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesOrders(map<string|string[]> headers = {}, *ListA_SalesOrdersQueries queries) returns CollectionOfA_SalesOrderWrapper|error {
        string resourcePath = string `/A_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the payment plans of all sales orders.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsOrdPaymentPlanItemDetails(map<string|string[]> headers = {}, *ListA_SlsOrdPaymentPlanItemDetailsQueries queries) returns CollectionOfA_SlsOrdPaymentPlanItemDetailsWrapper|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan items of all sales order items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsOrderItemBillingPlanItems(map<string|string[]> headers = {}, *ListA_SlsOrderItemBillingPlanItemsQueries queries) returns CollectionOfA_SlsOrderItemBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the address of a sales order header partner.
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listAddressesOfA_SalesOrderHeaderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}, *ListAddressesOfA_SalesOrderHeaderPartnerQueries queries) returns CollectionOfA_SalesOrderPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_Address`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item address of a sales order item partner.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listAddressesOfA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *ListAddressesOfA_SalesOrderItemPartnerQueries queries) returns CollectionOfA_SalesOrderItemPartnerAddressWrapper|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_Address`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan items of a sales order billing plan.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBillingPlanItemsOfA_SalesOrderBillingPlan(string SalesOrder, string BillingPlan, map<string|string[]> headers = {}, *ListBillingPlanItemsOfA_SalesOrderBillingPlanQueries queries) returns CollectionOfA_SalesOrderBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_BillingPlanItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the billing plan items of a sales order item billing plan.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listBillingPlanItemsOfA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, map<string|string[]> headers = {}, *ListBillingPlanItemsOfA_SalesOrderItemBillingPlanQueries queries) returns CollectionOfA_SlsOrderItemBillingPlanItemWrapper|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')/to_BillingPlanItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all items of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListItemsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderItemWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Item`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPartnersOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderHeaderPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item partners of a specific sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListPartnersOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header payment plan of a specific sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPaymentPlanItemDetailsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPaymentPlanItemDetailsOfA_SalesOrderQueries queries) returns CollectionOfA_SlsOrdPaymentPlanItemDetailsWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_PaymentPlanItemDetails`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related to_PrecedingProcFlowDocItem
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPrecedingProcFlowDocItemsOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListPrecedingProcFlowDocItemsOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_PrecedingProcFlowDocItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related to_PrecedingProcFlowDoc
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPrecedingProcFlowDocsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPrecedingProcFlowDocsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_PrecedingProcFlowDoc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing element of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderHeaderPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing element of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItemPrElementWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the related objects of a sales order header.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelatedObjectsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListRelatedObjectsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_RelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the related object of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelatedObjectsOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListRelatedObjectsOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_RelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the schedule lines of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listScheduleLinesOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListScheduleLinesOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderScheduleLineWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_ScheduleLine`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related to_SubsequentProcFlowDocItem
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSubsequentProcFlowDocItemsOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListSubsequentProcFlowDocItemsOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_SubsequentProcFlowDocItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related to_SubsequentProcFlowDoc
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSubsequentProcFlowDocsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListSubsequentProcFlowDocsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_SubsequentProcFlowDoc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header texts of a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTextsOfA_SalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListTextsOfA_SalesOrderQueries queries) returns CollectionOfA_SalesOrderTextWrapper|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')/to_Text`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the text of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTextsOfA_SalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListTextsOfA_SalesOrderItemQueries queries) returns CollectionOfA_SalesOrderItemTextWrapper|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')/to_Text`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates a sales order.
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrder(string SalesOrder, Modified\ A_SalesOrderType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrder('${getEncodedUri(SalesOrder)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the billing plan of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderBillingPlan(string SalesOrder, string BillingPlan, Modified\ A_SalesOrderBillingPlanType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a billing plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderBillingPlanItem(string SalesOrder, string BillingPlan, string BillingPlanItem, Modified\ A_SalesOrderBillingPlanItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a header partner for a specific sales order with a specific partner function.
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderHeaderPartner(string SalesOrder, string PartnerFunction, Modified\ A_SalesOrderHeaderPartnerType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderHeaderPartner(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a header pricing element for a sales order.
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderHeaderPrElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, Modified\ A_SalesOrderHeaderPrElementType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderHeaderPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItem(string SalesOrder, string SalesOrderItem, Modified\ A_SalesOrderItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the billing plan of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItemBillingPlan(string SalesOrder, string SalesOrderItem, string BillingPlan, Modified\ A_SalesOrderItemBillingPlanType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemBillingPlan(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a partner of a sales order item with a specific partner function.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, Modified\ A_SalesOrderItemPartnerType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemPartner(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the address of an item partner of a sales order.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + SalesOrderItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItemPartnerAddress(string SalesOrder, string SalesOrderItem, string PartnerFunction, string AddressRepresentationCode, Modified\ A_SalesOrderItemPartnerAddressType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates an item pricing element.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItemPrElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, Modified\ A_SalesOrderItemPrElementType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemPrElement(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates an item text.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, Modified\ A_SalesOrderItemTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderItemText(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the address of a header partner of a sales order.
    #
    # + SalesOrder - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + AddressRepresentationCode - Version ID for International Addresses
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderPartnerAddress(string SalesOrder, string PartnerFunction, string AddressRepresentationCode, Modified\ A_SalesOrderPartnerAddressType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderPartnerAddress(SalesOrder='${getEncodedUri(SalesOrder)}',PartnerFunction='${getEncodedUri(PartnerFunction)}',AddressRepresentationCode='${getEncodedUri(AddressRepresentationCode)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a schedule line.
    #
    # + SalesOrder - Sales Document
    # + SalesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderScheduleLine(string SalesOrder, string SalesOrderItem, string ScheduleLine, Modified\ A_SalesOrderScheduleLineType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderScheduleLine(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',ScheduleLine='${getEncodedUri(ScheduleLine)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a header text for a sales order.
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesOrderText(string SalesOrder, string Language, string LongTextID, Modified\ A_SalesOrderTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesOrderText(SalesOrder='${getEncodedUri(SalesOrder)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a payment plan item of a sales order.
    #
    # + SalesOrder - Sales Order
    # + PaymentPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SlsOrdPaymentPlanItemDetails(string SalesOrder, string PaymentPlanItem, Modified\ A_SlsOrdPaymentPlanItemDetailsType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrdPaymentPlanItemDetails(SalesOrder='${getEncodedUri(SalesOrder)}',PaymentPlanItem='${getEncodedUri(PaymentPlanItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a billing plan item of a sales order item.
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + BillingPlan - Billing/Invoicing Plan Number
    # + BillingPlanItem - Item for billing plan/invoice plan/payment cards
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SlsOrderItemBillingPlanItem(string SalesOrder, string SalesOrderItem, string BillingPlan, string BillingPlanItem, Modified\ A_SlsOrderItemBillingPlanItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrderItemBillingPlanItem(SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}',BillingPlan='${getEncodedUri(BillingPlan)}',BillingPlanItem='${getEncodedUri(BillingPlanItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action rejectApprovalRequest
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function rejectApprovalRequest(map<string|string[]> headers = {}, *RejectApprovalRequestQueries queries) returns FunctionResult_1|error {
        string resourcePath = string `/rejectApprovalRequest`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action releaseApprovalRequest
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function releaseApprovalRequest(map<string|string[]> headers = {}, *ReleaseApprovalRequestQueries queries) returns FunctionResult_2|error {
        string resourcePath = string `/releaseApprovalRequest`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
