// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerinax/sap;

# APIs that need to be implemented by the applications to allow Data Retention Manager (DRM) to orchestrate data subject blocking/deletion. These endpoints would be invoked when data subject deletion call is trigered from DRM by the customer or by the application in the customer's context. The data will be processed based on the residence and retention rules that are configured by the customer for a given data subject role of the application.
public isolated client class Client {
    final sap:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config,string hostname, int port = 443 = "https://sandbox.api.sap.com/sapdrm/configuredatasubjectdeletion") returns error? {
string serviceUrl = string `https://${hostname}:${port}/client.bal`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Endpoint to return the conditional field values for a transactional data
    #
    # + headers - Headers to be sent with the request 
    # + return - returns list of condtional field value with its description 
    resource isolated function get conditionFieldValues(GetConditionfieldvaluesHeaders headers = {}) returns ConditionalFieldValueHelpResponse|error {
        string resourcePath = string `/conditionFieldValues`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Endpoint to return the list of legal entities associated with the given data subject role.
    #
    # + dataSubjectRole - List of Legal Entities is returned associated with this Data Subject Role parameter.
    # + headers - Headers to be sent with the request 
    # + return - returns list of legal entities with description 
    resource isolated function get legalEntities/[string dataSubjectRole](GetLegalentitiesDatasubjectroleHeaders headers = {}) returns LegalEntityValueHelpResponse|error {
        string resourcePath = string `/legalEntities/${getEncodedUri(dataSubjectRole)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Endpoint to fetch the discovered transactional data for a given data subject role of the application group.
    #
    # + headers - Headers to be sent with the request 
    # + return - returns the details of the discoverd transactional data for the data subject role of the application group 
    resource isolated function get legalGrounds(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/legalGrounds`;
        return self.clientEp->get(resourcePath, headers);
    }

    # This is the callback endpoint for asynchronous deletion of the transactional data of the application
    #
    # + headers - Headers to be sent with the request 
    # + return - Transactional data deletion is initiated and the response to update the status of this deletion request has been set to "/appl/cb/legal-ground-deletion" endpoint 
    resource isolated function post AsyncdeleteLegalGroundInstances(PostAsyncdeletelegalgroundinstancesHeaders headers, AsyncDataSubjectLegalGroundDeletion payload) returns http:Response|error {
        string resourcePath = string `/AsyncdeleteLegalGroundInstances`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # This is the callback endpoint for asynchronous data subject deletion
    #
    # + headers - Headers to be sent with the request 
    # + return - Status of data subject deletion request has been updated successfully 
    resource isolated function post asyncCallback(DataSubjectAsyncCallBack payload, PostAsynccallbackHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/asyncCallback`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # This endpoint is used to check if business is completed for a data subject associated with the given data subject role
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function post dataSubjectEndOfBusiness(DataSubjectLegalGround payload, map<string|string[]> headers = {}) returns DataSubjectEndofBusinessResponse|error {
        string resourcePath = string `/dataSubjectEndOfBusiness`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to fetch data subject information like the first name, last name and email id.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Data Subject information retrieved successfully. In case the dataSubjectId is not found do not include it in the response. 
    resource isolated function post dataSubjectInformation(DataSubjectInformationRequest payload, map<string|string[]> headers = {}, *PostDatasubjectinformationQueries queries) returns DataSubjectInformation[]|error {
        string resourcePath = string `/dataSubjectInformation`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to return list of legal entities associated with a data subject
    #
    # + headers - Headers to be sent with the request 
    # + return - Legal entities retrived successfully 
    resource isolated function post dataSubjectLegalEntities(DataSubjectLegalGround payload, map<string|string[]> headers = {}) returns DataSubjectLegalEntitiesResponse|error {
        string resourcePath = string `/dataSubjectLegalEntities`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to soft delete (block) the data subject of a given application group.
    #
    # + headers - Headers to be sent with the request 
    # + return - Deleted successfully 
    resource isolated function post deleteDataSubject(DataSubjectDeletion payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/deleteDataSubject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # This is the callback endpoint to be implemented by the master data service applications that reuse another master data application.
    #
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post deleteDataSubjectMaster(MasterDataSubjectIOT payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/deleteDataSubjectMaster`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to handle the soft deletion (blocking) of the transactional data instances
    #
    # + headers - Headers to be sent with the request 
    # + return - Deleted successfully 
    resource isolated function post deleteLegalGroundInstances(DataSubjectLegalGroundDeletion payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/deleteLegalGroundInstances`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to hard delete (destroy) the blocked data subjects
    #
    # + headers - Headers to be sent with the request 
    # + return - Accepted. Asynchronous process to destroy blocked data subjects is triggered successfully 
    resource isolated function post destroyDataSubjects(DataSubjectsDestroying payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/destroyDataSubjects`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to hard delete (destroy) the blocked transactional data instances
    #
    # + headers - Headers to be sent with the request 
    # + return - Accepted. Asynchronous process to destroy blocked transactional data instances which have crossed the retention period is triggered successfully 
    resource isolated function post destroyLegalGroundInstances(DataSubjectsLegalGroundDestroying payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/destroyLegalGroundInstances`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to fetch data subjects which have reached end of purpose.
    #
    # + headers - Headers to be sent with the request 
    # + return - Data subjects which has fullfilled residence constraint or not fullfilled based on residence rules 
    resource isolated function post endofResidenceDS(DataSubjectEndofResidence payload, map<string|string[]> headers = {}) returns DataSubjectEndofResidenceResponse|error {
        string resourcePath = string `/endofResidenceDS`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint to check if data subjects have reached the end of purpose when more than one transactional data is configured for the application
    #
    # + headers - Headers to be sent with the request 
    # + return - List of data subjects eligible for deletion 
    resource isolated function post endofResidenceDSConfirmation(DataSubjectEndofResidenceConfirmation payload, map<string|string[]> headers = {}) returns DataSubjectEndofResidenceConfirmationResponse|error {
        string resourcePath = string `/endofResidenceDSConfirmation`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Endpoint returns the last retention start date for the calculation of the blocking and deletion periods of the data subject
    #
    # + headers - Headers to be sent with the request 
    # + return - Start of retention date retrieve successfully 
    resource isolated function post retentionStartDate(DataSubjectRetentionStartDate payload, map<string|string[]> headers = {}) returns DataSubjectRetentionStartDateResponse[]|error {
        string resourcePath = string `/retentionStartDate`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
